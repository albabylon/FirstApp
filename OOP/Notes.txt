Значимый тип — тип, значение которого хранится в стеке.

Ссылочный тип — тип, значение которого хранится в куче, а в стеке хранится ссылка на адрес в куче.

Конструктор — специальный метод, имеющий одно название с классом (структурой), который вызывается при создании нового объекта данного класса (структуры).

Инициализаторы представляют передачу в фигурных скобках значений доступным полям и свойствам объекта.
Human human = new Human { name = "Дмитрий", age = 23 };
С помощью инициализатора можно устанавливать значения только доступных из внешнего кода полей и свойств объекта (которые помечены ключевым словом public).
Если в конструкторе устанавливаются значения полей, которые указаны в инициализаторе, то значения, устанавливаемые в конструкторе, заменяются значениями из инициализатора.

String является ссылочным типом, а значит, он не хранится напрямую в стеке, только ссылка на него. И этим он очень похож на массив символов типа char. В отличие от массива, мы можем получить значение всех элементов массива сразу, без обращения к каждому из них. И в отличие от других ссылочных типов, тип string неизменяем. Данное свойство называется иммутабельностью, оно устанавливает ограничения по изменению на строку.
За счет передачи ссылки на область в куче вместо копирования целой строки в стек (при передаче параметров в метод) мы не тратим время и память и просто храним ссылку. Также при передаче строки в методы мы защищены от переполнения памяти в стеке, поскольку строки могут занимать куда больше места, чем ссылка на нее.
А из-за ее неизменяемости обеспечивается правильная работа со строкой во всех местах, куда бы вы ее не передавали (вам бы не хотелось изменить строку в одном методе и увидеть, что она меняется во всем приложении и ломает этим логику программы), в том числе и при работе с многопоточностью (когда несколько разных источников пытаются получить доступ к одной строке в одно и то же время), о чем мы поговорим позднее.

Необходимо проерять ссылочные типы на null
Human human = null;
Console.WriteLine(human?.age);
В случае, если human будет равен null, то и значение выражения human?.age будет равно null.

Также вам пригодится оператор null-объединения, или оператор ??. Данный оператор возвращает левый операнд, если этот операнд не равен null, иначе — правый. При этом левый операнд должен принимать null.
object first = null;
object second = first ?? 100;
Human human = null;
Human newHuman = human ?? new Human("Дмитрий", 23);
Но данный оператор нельзя применять со значимыми типами, поскольку они не могут хранить значение null


Упаковка — процесс преобразования объекта значимого типа в объект типа object. При этом значение объекта заносится в управляемую кучу.

Распаковка — обратный упаковке процесс, когда из упакованного объекта типа object создается объект изначального типа. При этом значение объекта переносится из управляемой кучи в стек.
Упаковка может быть использована для решения проблем разнотипных объектов. Например, если вы захотите хранить в одном массиве и целочисленные значения типа int, и строки типа string, то вы можете создать массив объектов object[].

неявная упаковка:
int i = 123;
object o = i;
явная упаковка:
object o = (object)i;
распаковка только явным способом:
int i = 123;
// Упаковка значения i в объект o
object o = i;
// Распаковка o
int j = (int)o;

ООП
Объект — это некоторый элемент реального мира в цифровом представлении (в программе), обладающий индивидуальными/характерными свойствами.
Класс — это набор объектов, обладающих общими характерными свойствами, которые однозначно идентифицируют эту группу объектов.
В терминологии C# класс — это класс, а в качестве объекта выступает экземпляр класса.

Абстрагирование — это способ выделить набор значимых характеристик объекта, исключая из рассмотрения незначимые. Соответственно, абстракция — это использование всех таких характеристик для описания объекта.

Инкапсуляция — это объединение и изолирование всех данных и процессов объекта внутри единой структуры.

Сборка является базовой структурной единицей в .Net, на уровне которой проходит контроль версий, развертывание и конфигурация приложения.

public	
Публичный общедоступный класс или член класса.
Элементы и классы, помеченные таким модификатором, доступны из любого места в коде, а также из других программ и сборок.

private	
Закрытый класс или член класса. Представляет полную противоположность модификатору public.
Элементы и классы, помеченные таким модификатором, доступны только из кода в том же классе или контексте.

protected	
Защищенный член класса. Используется при наследовании (одном из принципов ООП, о котором мы поговорим в следующем модуле).
Элементы, помеченные таким модификатором, доступны из любого места в текущем классе или в производных классах. При этом производные классы могут располагаться в других сборках.

internal	
Элементы и классы, помеченные таким модификатором, доступны из любого места кода в той же сборке, однако он недоступен для других программ и сборок (как в случае с модификатором public).

protected internal	Данный модификатор совмещает функционал двух модификаторов protected и internal.
Элементы и классы, помеченные таким модификатором, доступны в текущей сборке и из производных классов (при наследовании), даже если производные классы располагаются в других сборках.

private protected	
Данный модификатор совмещает функционал двух модификаторов private и protected.
Элементы, помеченные таким модификатором, доступны из любого места в текущем классе или в производных классах, которые определены в той же сборке.


Свойства являются специальными членами классов (и структур), которые позволяют получать и изменять значение приватного поля, применяя некоторую логику для проверки (валидации) действий.


Полиморфизм — это возможность объекта изменять и дорабатывать методы родительского объекта с целью решения прикладной задачи.