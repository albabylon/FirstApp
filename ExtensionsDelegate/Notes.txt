Общедоступные конструкторы класса Exception
Exception()	Инициализирует новый экземпляр класса Exception.
Exception(SerializationInfo, StreamingContext)	Инициализирует новый экземпляр класса Exception с сериализованными данными.
Exception(String)	Инициализирует новый экземпляр класса Exception с указанным сообщением об ошибке.
Exception(String, Exception)	Инициализирует новый экземпляр класса Exception с указанным сообщением об ошибке и ссылкой на внутреннее исключение, вызвавшее данное исключение.

Свойства класса Exception
Data	Возвращает коллекцию пар «ключ-значение», предоставляющую дополнительные сведения об исключении. В частых случаях в данное свойство вставляем дату исключения.
HelpLink	Получает или задает ссылку на файл справки, связанный с этим исключением.
HResult	Возвращает или задает HRESULT — кодированное числовое значение, присвоенное определенному исключению.
InnerException	Возвращает экземпляр класса Exception, который вызвал текущее исключение.
Message	Возвращает сообщение, описывающее текущее исключение.
Source	Возвращает или задает имя приложения или объекта, вызвавшего ошибку.
StackTrace	Получает строковое представление непосредственных кадров в стеке вызова.
TargetSite	Возвращает метод, создавший текущее исключение.

Методы класса Exception
Equals(Object)	Определяет, равен ли указанный объект текущему объекту.
GetBaseException()	При переопределении в производном классе возвращает исключение Exception, которое является первопричиной одного или нескольких последующих исключений.
GetHashCode()	Служит в качестве хэш-функции по умолчанию.(Унаследовано от Object)
GetObjectData(SerializationInfo, StreamingContext)	При переопределении в производном классе задает объект SerializationInfo со сведениями об исключении.
GetType()	Возвращает тип среды выполнения текущего экземпляра.
MemberwiseClone()	Создает неполную копию текущего объекта Object.(Унаследовано от Object)
ToString()	Создает и возвращает строковое представление текущего исключения.


ArgumentException	Непустой аргумент, передаваемый в метод, является недопустимым.
ArgumentNullException	Аргумент, передаваемый в метод — null.
ArgumentOutOfRangeException	Аргумент находится за пределами диапазона допустимых значений.
DirectoryNotFoundException	Недопустимая часть пути к каталогу.
DivideByZeroException	Знаменатель в операции деления или целого числа Decimal равен нулю.
DriveNotFoundException	Диск недоступен или не существует.
FileNotFoundException	Файл не существует.
FormatException	Значение не находится в соответствующем формате для преобразования из строки методом преобразования, например Parse .
IndexOutOfRangeException	Индекс находится за пределами границ массива или коллекции.
InvalidOperationException	Вызов метода недопустим в текущем состоянии объекта.
KeyNotFoundException	Не удается найти указанный ключ для доступа к элементу в коллекции.
NotImplementedException	Метод или операция не реализованы.
NotSupportedException	Метод или операция не поддерживается.
ObjectDisposedException	Операция выполняется над объектом, который был ликвидирован.
OverflowException	Арифметическое, приведение или операция преобразования приводят к переполнению.
PathTooLongException	Длина пути или имени файла превышает максимальную длину, определенную системой.
PlatformNotSupportedException	Операция не поддерживается на текущей платформе.
RankException	В метод передается массив с неправильным числом измерений.
TimeoutException	Срок действия интервала времени, выделенного для операции, истек.
UriFormatException	Используется недопустимый универсальный код ресурса (URI).



try: блок try инкапсулирует проверяемый на исключение регион кода. Если любая строка кода в этом блоке вызывает срабатывание исключения, то исключение будет обработано соответствующим блоком catch.
catch: когда происходит исключение, запускается блок кода catch. Это то место, где вы можете обработать исключения и предпринять адекватные для него действия, например, записать событие ошибки в лог, прервать работу программы, или может просто игнорировать исключение (когда блок catch пустой).
finally: блок finally позволяет вам выполнить какой-то определенный код приложения, если исключение сработало, или если оно не сработало. Например, если вы открываете файл, он должен быть закрыт вне зависимости от того, возникло ли исключение. Часто блок finally опускается, когда обработка исключения подразумевает нормальное дальнейшее выполнение программы, потому блок finally может быть просто заменен обычным кодом, который следует за блоками try и catch.
throw: ключевое слово throw используется для реального создания нового исключения (в юните 9.1 мы уже затрагивали данный блок в примере), в результате чего выполнение кода попадет в соответствующие блоки catch и finally.